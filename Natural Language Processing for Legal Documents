import nltk
import spacy
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

nltk.download('punkt')
nltk.download('stopwords')

stop_words = set(stopwords.words('english'))
nlp = spacy.load('en_core_web_sm')

def preprocess(text):
    # Tokenize the text
    word_tokens = word_tokenize(text)
    
    # Remove stop words and non-alphabetic tokens
    filtered_tokens = [word for word in word_tokens if word.isalpha() and word not in stop_words]
    
    # Lemmatize tokens
    lemmatized_tokens = [token.lemma_ for token in nlp(' '.join(filtered_tokens))]
    
    return ' '.join(lemmatized_tokens)

# Example usage
text = "The quick brown fox jumps over the lazy dog."
cleaned_text = preprocess(text)
print(cleaned_text)
def extract_entities(text):
    doc = nlp(text)
    entities = [(entity.text, entity.label_) for entity in doc.ents]
    return entities

# Example usage
text = "John Doe signed the contract on 10th May 2024 with OpenAI."
entities = extract_entities(text)
print(entities)
import pandas as pd
from sklearn.model_selection import train_test_split

# Load your dataset
# Assume you have a CSV file with 'text' and 'label' columns
df = pd.read_csv('legal_documents.csv')

# Preprocess the text
df['cleaned_text'] = df['text'].apply(preprocess)

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(df['cleaned_text'], df['label'], test_size=0.2, random_state=42)
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from sklearn.metrics import classification_report

# Create a pipeline
model = make_pipeline(TfidfVectorizer(), MultinomialNB())

# Train the model
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
print(classification_report(y_test, y_pred))
from transformers import pipeline

# Load summarization pipeline
summarizer = pipeline('summarization')

def summarize(text):
    summary = summarizer(text, max_length=130, min_length=30, do_sample=False)
    return summary[0]['summary_text']

# Example usage
text = "Your long legal document text goes here."
summary = summarize(text)
print(summary)
import pandas as pd
import nltk
import spacy
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from sklearn.metrics import classification_report
from transformers import pipeline

nltk.download('punkt')
nltk.download('stopwords')

stop_words = set(stopwords.words('english'))
nlp = spacy.load('en_core_web_sm')
summarizer = pipeline('summarization')

def preprocess(text):
    word_tokens = word_tokenize(text)
    filtered_tokens = [word for word in word_tokens if word.isalpha() and word not in stop_words]
    lemmatized_tokens = [token.lemma_ for token in nlp(' '.join(filtered_tokens))]
    return ' '.join(lemmatized_tokens)

def extract_entities(text):
    doc = nlp(text)
    entities = [(entity.text, entity.label_) for entity in doc.ents]
    return entities

def summarize(text):
    summary = summarizer(text, max_length=130, min_length=30, do_sample=False)
    return summary[0]['summary_text']

# Load dataset
df = pd.read_csv('legal_documents.csv')
df['cleaned_text'] = df['text'].apply(preprocess)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(df['cleaned_text'], df['label'], test_size=0.2, random_state=42)

# Train classification model
model = make_pipeline(TfidfVectorizer(), MultinomialNB())
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))

# Extract entities and summarize a sample document
sample_text = df['text'].iloc[0]
entities = extract_entities(sample_text)
summary = summarize(sample_text)

print("Entities:", entities)
print("Summary:", summary)
